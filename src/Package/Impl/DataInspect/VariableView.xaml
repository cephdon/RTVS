<UserControl x:Class="Microsoft.VisualStudio.R.Package.DataInspect.VariableView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:pkg="clr-namespace:Microsoft.VisualStudio.R.Package"
             xmlns:local="clr-namespace:Microsoft.VisualStudio.R.Package.DataInspect"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:imagecatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:core="clr-namespace:System;assembly=mscorlib"
             xmlns:wpf="clr-namespace:Microsoft.Common.Wpf;assembly=Microsoft.R.Common.Wpf"
             xmlns:rwpf="clr-namespace:Microsoft.R.Wpf;assembly=Microsoft.R.Wpf"
             xmlns:controls="clr-namespace:Microsoft.Common.Wpf.Controls;assembly=Microsoft.R.Common.Wpf"
             wpf:LambdaProperties.ImportedNamespaces="System.Linq Microsoft.VisualStudio.Imaging Microsoft.R.DataInspection"
             mc:Ignorable="d" x:Name="Self"
             d:DesignHeight="300" d:DesignWidth="300"
             Foreground="{DynamicResource {x:Static rwpf:Brushes.WindowTextKey}}"
             HorizontalAlignment="Stretch">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <rwpf:CommonResources />
                <ResourceDictionary Source="DataGridStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <local:MultiplyConverter x:Key="MultiplyConverter" />

            <core:Double x:Key="ExpanderToggleSize">16</core:Double>

            <Style x:Key="ExpanderToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="{StaticResource ExpanderToggleSize}"/>
                <Setter Property="Height" Value="{StaticResource ExpanderToggleSize}"/>
                <Setter Property="Visibility" Value="{Binding HasChildren, Converter={x:Static rwpf:Converters.FalseIsHidden}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="{TemplateBinding Height}" Padding="5" Width="{TemplateBinding Width}">
                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Stroke="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphBrushKey}}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphBrushKey}}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphMouseOverBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphMouseOverBrushKey}}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static rwpf:Brushes.TreeViewGlyphMouseOverBrushKey}}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="NameCellTemplate">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="Indentation" Grid.Column="0" Width="{Binding Depth, Converter={StaticResource MultiplyConverter}, ConverterParameter={StaticResource ExpanderToggleSize}}" />

                    <controls:ExpandCollapseButton x:Name="Expander" Grid.Column="1" Style="{StaticResource ExpandCollapseButtonStyle}"
                                                   IsExpanded="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                   AutomationProperties.Name="{x:Static pkg:Resources.VariableExplorer_ExpandVariable}"/>
                    <imaging:CrispImage Grid.Column="2" Width="16" Height="16" Opacity="0.5"
                                        Moniker="{Binding Model.Content.DebugEvaluation, Converter={wpf:Lambda '(IREvaluationResultInfo info) => GetVariableIcon(info)'}}">
                        <imaging:CrispImage.ToolTip>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} ({1})">
                                        <Binding Path="Model.Content.TypeName"/>
                                        <Binding Path="Model.Content.Class"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </imaging:CrispImage.ToolTip>
                    </imaging:CrispImage>
                    <TextBlock Grid.Column="3" Text="{Binding Model.Content.Name}" ToolTip="{Binding Model.Content.Name}" VerticalAlignment="Center" Margin="6,0,0,0" />
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="ValueCellTemplate">
                <Grid Height="{Binding Path=RowHeight, ElementName=RootTreeGrid, Converter={x:Static rwpf:Converters.Scale155}}"
                      VerticalAlignment="Center" ToolTip="{Binding Model.Content.Value}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{Binding Model.Content.Value}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Grid.Column="0" Padding="2,0,2,0"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="2,0,0,0" Grid.Column="1">
                        <StackPanel.Resources>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="BorderBrush"
                                Value="{DynamicResource {x:Static rwpf:Brushes.ToolWindowButtonHoverActiveBorderBrushKey}}" />
                                        <Setter Property="Background"
                                Value="{DynamicResource {x:Static rwpf:Brushes.ToolWindowButtonHoverActiveBrushKey}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>
                        <StackPanel.Visibility>
                            <MultiBinding Converter="{x:Static rwpf:Converters.AnyIsNotCollapsed}">
                                <Binding Path="Model.Content.CanShowDetail"/>
                                <Binding Path="Model.Content.CanShowOpenCsv"/>
                            </MultiBinding>
                        </StackPanel.Visibility>
                        <Button 
                            Visibility="{Binding Model.Content.CanShowDetail, Converter={x:Static rwpf:Converters.FalseIsCollapsed}}"
                            Command="{Binding Model.Content.ShowDetailCommand}" ToolTip="{Binding Model.Content.ShowDetailCommandTooltip}"
                            AutomationProperties.Name="{Binding Path=Model.Content.Name, StringFormat={x:Static pkg:Resources.ShowDetailCommandAutomationName}}"
                            AutomationProperties.HelpText="{Binding Path=Model.Content.Name, StringFormat={x:Static pkg:Resources.ShowDetailCommandAutomationHelpText}}"
                            VerticalAlignment="Center" Focusable="False">
                            <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static imagecatalog:KnownMonikers.Zoom}"/>
                        </Button>
                        <Button
                            Visibility="{Binding Model.Content.CanShowOpenCsv, Converter={x:Static rwpf:Converters.FalseIsCollapsed}}"
                            Command="{Binding Model.Content.OpenInCsvAppCommand}" ToolTip="{Binding Model.Content.OpenInCsvAppCommandTooltip}"
                            AutomationProperties.Name="{Binding Path=Model.Content.Name, StringFormat={x:Static pkg:Resources.OpenCsvAppCommandAutomationName}}"
                            AutomationProperties.HelpText="{Binding Path=Model.Content.Name, StringFormat={x:Static pkg:Resources.OpenCsvAppCommandAutomationHelpText}}"
                            VerticalAlignment="Center" Focusable="False">
                            <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static imagecatalog:KnownMonikers.OfficeExcel2013}"/>
                        </Button>
                    </StackPanel>
                </Grid>
            </DataTemplate>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid KeyboardNavigation.TabNavigation="Cycle">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <ComboBox x:Name="EnvironmentComboBox" Margin="4" TabIndex="1"
                  ItemsSource="{Binding Environments}" SelectedItem="{Binding SelectedEnvironment}"
                  SelectionChanged="EnvironmentComboBox_SelectionChanged"
                  AutomationProperties.Name="{x:Static pkg:Resources.VariableExplorer_EnvironmentsCombo_AccessibleName}">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" AutomationProperties.Name="{Binding Name}">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{Binding Kind, Converter={wpf:Lambda '(REnvironmentKind kind) => GetEnvironmentIcon(kind)'}}"/>
                        <TextBlock Text="{Binding Name}" Margin="6,0,0,0" />
                    </StackPanel>
                </DataTemplate>
            </ComboBox.ItemTemplate>
            <ComboBox.ItemContainerStyle>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{wpf:StyleSetter Style={StaticResource {x:Type ComboBox}}, Property=ItemsControl.ItemContainerStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                        <Separator HorizontalAlignment="Stretch"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="AutomationProperties.Name" Value="{Binding Name}" />
                </Style>
            </ComboBox.ItemContainerStyle>
        </ComboBox>

        <local:TreeGrid x:Name="RootTreeGrid" Grid.Row="1"
                        AutoGenerateColumns="False" TabIndex="0" 
                        ScrollViewer.VerticalScrollBarVisibility="Visible"
                        IsReadOnly="True" ItemsChanged="OnItemsChanged"
                        RowHeight="{Binding Path=FontSize, ElementName=Self, Converter={x:Static rwpf:Converters.Scale190}}">
            <DataGrid.Resources>
                <Style x:Key="SelectableCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                    <Setter Property="KeyboardNavigation.IsTabStop" Value="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" />
                </Style>
                <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                </Style>
            </DataGrid.Resources>
            <DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <DataGridCellsPanel KeyboardNavigation.IsTabStop="True" KeyboardNavigation.TabIndex="0" Focusable="False"  />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                    <EventSetter Event="MouseDoubleClick" Handler="GridRow_MouseDoubleClick" />
                    <EventSetter Event="MouseRightButtonUp" Handler="GridRow_MouseRightButtonUp" />
                    <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
                    <EventSetter Event="PreviewKeyUp" Handler="OnPreviewKeyUp" />
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn x:Name="NameColumn" Header="{x:Static pkg:Resources.VariableExplorer_NameHeader}" CellTemplate="{StaticResource NameCellTemplate}"
                                        Width="2*" CellStyle="{StaticResource SelectableCellStyle}" CanUserSort="True" SortMemberPath="DummyValue">
                    <DataGridTemplateColumn.HeaderStyle>
                        <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                            <Setter Property="Focusable" Value="True" />
                        </Style>
                    </DataGridTemplateColumn.HeaderStyle>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn x:Name="ValueColumn" Header="{x:Static pkg:Resources.VariableExplorer_ValueHeader}" CellTemplate="{StaticResource ValueCellTemplate}"
                                        Width="3*" CanUserSort="False" />
            </DataGrid.Columns>
        </local:TreeGrid>
    </Grid>
</UserControl>
